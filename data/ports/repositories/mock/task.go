// Code generated by MockGen. DO NOT EDIT.
// Source: task.go

// Package mock is a generated GoMock package.
package mock

import (
	errors "go-tasks/domain/errors"
	model "go-tasks/domain/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTaskRepository) Add(task *model.Task) errors.AppError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", task)
	ret0, _ := ret[0].(errors.AppError)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTaskRepositoryMockRecorder) Add(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTaskRepository)(nil).Add), task)
}
